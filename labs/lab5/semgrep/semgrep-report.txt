                    
                    
┌──────────────────┐
│ 25 Code Findings │
└──────────────────┘
                                                     
    /src/data/static/codefixes/dbSchemaChallenge_1.ts
   ❯❯❱ javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
          Details: https://sg.run/gjoe                                                                        
                                                                                                              
            5┆ models.sequelize.query("SELECT * FROM Products WHERE ((name LIKE '%"+criteria+"%' OR
               description LIKE '%"+criteria+"%') AND deletedAt IS NULL) ORDER BY name")           
                                                     
    /src/data/static/codefixes/dbSchemaChallenge_3.ts
   ❯❯❱ javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
          Details: https://sg.run/gjoe                                                                        
                                                                                                              
           11┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
                                                              
    /src/data/static/codefixes/unionSqlInjectionChallenge_1.ts
   ❯❯❱ javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
          Details: https://sg.run/gjoe                                                                        
                                                                                                              
            6┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
                                                              
    /src/data/static/codefixes/unionSqlInjectionChallenge_3.ts
   ❯❯❱ javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
          Details: https://sg.run/gjoe                                                                        
                                                                                                              
           10┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`)           
                                                      
    /src/frontend/src/app/navbar/navbar.component.html
    ❯❱ generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var
          Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject
          custom JavaScript handlers. To fix this, add quotes around the template expression, like this: "{{
          expr }}".                                                                                         
          Details: https://sg.run/weNX                                                                      
                                                                                                            
           17┆ <img [src]="logoSrc" class="logo" alt={{applicationName}}>
                                                                        
    /src/frontend/src/app/purchase-basket/purchase-basket.component.html
    ❯❱ generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var
          Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject
          custom JavaScript handlers. To fix this, add quotes around the template expression, like this: "{{
          expr }}".                                                                                         
          Details: https://sg.run/weNX                                                                      
                                                                                                            
           15┆ <img [src]="'assets/public/images/products/'+element.image" alt={{element.name}}
                                                                    
    /src/frontend/src/app/search-result/search-result.component.html
    ❯❱ generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var
          Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject
          custom JavaScript handlers. To fix this, add quotes around the template expression, like this: "{{
          expr }}".                                                                                         
          Details: https://sg.run/weNX                                                                      
                                                                                                            
           40┆ <img mat-card-image [src]="'assets/public/images/products/'+item.image" alt={{item.name}}
                          
    /src/lib/insecurity.ts
    ❯❱ javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret
          A hard-coded credential was detected. It is not recommended to store credentials in source-code, as
          this risks secrets being leaked and used by either an internal or external malicious adversary. It 
          is recommended to use environment variables to securely provide credentials or retrieve credentials
          from a secure vault or HSM (Hardware Security Module).                                             
          Details: https://sg.run/4xN9                                                                       
                                                                                                             
           56┆ export const authorize = (user = {}) => jwt.sign(user, privateKey, { expiresIn: '6h',
               algorithm: 'RS256' })                                                                
                          
    /src/routes/chatbot.ts
    ❯❱ javascript.express.security.injection.raw-html-format.raw-html-format
          User data flows into the host portion of this manually-constructed HTML. This can introduce a Cross-
          Site-Scripting (XSS) vulnerability if this comes from user-provided input. Consider using a         
          sanitization library such as DOMPurify to sanitize the HTML within.                                 
          Details: https://sg.run/5DO3                                                                        
                                                                                                              
          197┆ body: bot.training.state ? bot.greet(`${user.id}`) :                                     
               `${config.get<string>('application.chatBot.name')} isn't ready at the moment, please wait
               while I set things up`                                                                   
                             
    /src/routes/fileServer.ts
    ❯❱ javascript.express.security.audit.express-res-sendfile.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
          Details: https://sg.run/7DJk                                                                       
                                                                                                             
           33┆ res.sendFile(path.resolve('ftp/', file))
                            
    /src/routes/keyServer.ts
    ❯❱ javascript.express.security.audit.express-res-sendfile.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
          Details: https://sg.run/7DJk                                                                       
                                                                                                             
           14┆ res.sendFile(path.resolve('encryptionkeys/', file))
                                
    /src/routes/logfileServer.ts
    ❯❱ javascript.express.security.audit.express-res-sendfile.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
          Details: https://sg.run/7DJk                                                                       
                                                                                                             
           14┆ res.sendFile(path.resolve('logs/', file))
                        
    /src/routes/login.ts
   ❯❯❱ javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
          Details: https://sg.run/gjoe                                                                        
                                                                                                              
           34┆ models.sequelize.query(`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND
               password = '${security.hash(req.body.password || '')}' AND deletedAt IS NULL`, { model:
               UserModel, plain: true }) // vuln-code-snippet vuln-line loginAdminChallenge           
               loginBenderChallenge loginJimChallenge                                                 
                                   
    /src/routes/quarantineServer.ts
    ❯❱ javascript.express.security.audit.express-res-sendfile.express-res-sendfile
          The application processes user-input, this is passed to res.sendFile which can allow an attacker to
          arbitrarily read files on the system through path traversal. It is recommended to perform input    
          validation in addition to canonicalizing the path. This allows you to validate the path against the
          intended directory it should be accessing.                                                         
          Details: https://sg.run/7DJk                                                                       
                                                                                                             
           14┆ res.sendFile(path.resolve('ftp/quarantine/', file))
                           
    /src/routes/redirect.ts
    ❯❱ javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect
          It looks like 'toUrl' is read from user input and it is used to as a redirect. Ensure 'toUrl' is not
          externally controlled, otherwise this is an open redirect.                                          
          Details: https://sg.run/OPv2                                                                        
                                                                                                              
           19┆ res.redirect(toUrl)
   
    ❯❱ javascript.express.security.audit.express-open-redirect.express-open-redirect
          The application redirects to a URL specified by user-supplied input `query` that is not validated. 
          This could redirect users to malicious locations. Consider using an allow-list approach to validate
          URLs, or warn users they are being redirected to a third-party website.                            
          Details: https://sg.run/EpoP                                                                       
                                                                                                             
           19┆ res.redirect(toUrl)
                         
    /src/routes/search.ts
   ❯❯❱ javascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL injection if   
          the variable is user-controlled and is not properly sanitized. In order to prevent SQL injection, it
          is recommended to use parameterized queries or prepared statements.                                 
          Details: https://sg.run/gjoe                                                                        
                                                                                                              
           23┆ models.sequelize.query(`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR   
               description LIKE '%${criteria}%') AND deletedAt IS NULL) ORDER BY name`) // vuln-code-
               snippet vuln-line unionSqlInjectionChallenge dbSchemaChallenge                        
                              
    /src/routes/userProfile.ts
   ❯❯❱ javascript.lang.security.audit.code-string-concat.code-string-concat
          Found data from an Express or Next web request flowing to `eval`. If this data is user-controllable
          this can lead to execution of arbitrary system commands in the context of your application process.
          Avoid `eval` whenever possible.                                                                    
          Details: https://sg.run/96Yk                                                                       
                                                                                                             
           62┆ username = eval(code) // eslint-disable-line no-eval
                               
    /src/routes/videoHandler.ts
    ❯❱ javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag
          Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be susceptible to
          cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or sanitize this data.    
          Details: https://sg.run/1Zy1                                                                      
                                                                                                            
           58┆ challengeUtils.solveIf(challenges.videoXssChallenge, () => { return utils.contains(subs,
               '</script><script>alert(`xss`)</script>') })                                            
            ⋮┆----------------------------------------
           71┆ compiledTemplate = compiledTemplate.replace('<script id="subtitle"></script>', '<script  
               id="subtitle" type="text/vtt" data-label="English" data-lang="en">' + subs + '</script>')
                  
    /src/server.ts
    ❯❱ javascript.express.security.audit.express-check-directory-listing.express-check-directory-listing
          Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories and 
          files. It is recommended to disable directory listing unless it is a public resource. If you need
          directory listing, ensure that sensitive files are inaccessible when querying the resource.      
          Details: https://sg.run/DX2G                                                                     
                                                                                                           
          269┆ app.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true })) // vuln-code-
               snippet vuln-line directoryListingChallenge                                            
            ⋮┆----------------------------------------
          273┆ app.use('/.well-known', serveIndexMiddleware, serveIndex('.well-known', { icons: true,
               view: 'details' }))                                                                   
            ⋮┆----------------------------------------
          277┆ app.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons:
               true, view: 'details' }))                                                             
            ⋮┆----------------------------------------
          281┆ app.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view:
               'details' })) // vuln-code-snippet vuln-line accessLogDisclosureChallenge             
                                  
    /src/views/dataErasureForm.hbs
    ❯❱ generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var
          Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject
          custom JavaScript handlers. To fix this, add quotes around the template expression, like this: "{{
          expr }}".                                                                                         
          Details: https://sg.run/weNX                                                                      
                                                                                                            
           21┆ <input type="email" required placeholder={{userEmail}} name="email" id="email">
