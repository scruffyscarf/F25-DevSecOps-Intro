
Result #1 CRITICAL Instance is exposed publicly. 
────────────────────────────────────────────────────────────────────────────────
  database.tf:17
────────────────────────────────────────────────────────────────────────────────
    5    resource "aws_db_instance" "unencrypted_db" {
    .  
   17  [   publicly_accessible = true  # SECURITY ISSUE #10 - Public access! (true)
   ..  
   37    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-rds-no-public-db-access
      Impact The database instance is publicly accessible
  Resolution Set the database to not be publicly accessible

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/rds/no-public-db-access/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance
────────────────────────────────────────────────────────────────────────────────


Result #2 CRITICAL Security group rule allows ingress from public internet. 
────────────────────────────────────────────────────────────────────────────────
  security_groups.tf:15
────────────────────────────────────────────────────────────────────────────────
    5    resource "aws_security_group" "allow_all" {
    .  
   15  [     cidr_blocks = ["0.0.0.0/0"]  # From anywhere!
   ..  
   28    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-ec2-no-public-ingress-sgr
      Impact Your port exposed to the internet
  Resolution Set a more restrictive cidr range

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/ec2/no-public-ingress-sgr/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group_rule#cidr_blocks
────────────────────────────────────────────────────────────────────────────────


Result #3 CRITICAL Security group rule allows egress to multiple public internet addresses. 
────────────────────────────────────────────────────────────────────────────────
  security_groups.tf:22
────────────────────────────────────────────────────────────────────────────────
    5    resource "aws_security_group" "allow_all" {
    .  
   22  [     cidr_blocks = ["0.0.0.0/0"]
   ..  
   28    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-ec2-no-public-egress-sgr
      Impact Your port is egressing data to the internet
  Resolution Set a more restrictive cidr range

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/ec2/no-public-egress-sgr/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group
────────────────────────────────────────────────────────────────────────────────


Result #4 CRITICAL Security group rule allows ingress from public internet. 
────────────────────────────────────────────────────────────────────────────────
  security_groups.tf:41
────────────────────────────────────────────────────────────────────────────────
   31    resource "aws_security_group" "ssh_open" {
   ..  
   41  [     cidr_blocks = ["0.0.0.0/0"]  # SSH from anywhere!
   ..  
   62    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-ec2-no-public-ingress-sgr
      Impact Your port exposed to the internet
  Resolution Set a more restrictive cidr range

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/ec2/no-public-ingress-sgr/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group_rule#cidr_blocks
────────────────────────────────────────────────────────────────────────────────


Result #5 CRITICAL Security group rule allows ingress from public internet. 
────────────────────────────────────────────────────────────────────────────────
  security_groups.tf:49
────────────────────────────────────────────────────────────────────────────────
   31    resource "aws_security_group" "ssh_open" {
   ..  
   49  [     cidr_blocks = ["0.0.0.0/0"]  # RDP from anywhere!
   ..  
   62    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-ec2-no-public-ingress-sgr
      Impact Your port exposed to the internet
  Resolution Set a more restrictive cidr range

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/ec2/no-public-ingress-sgr/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group_rule#cidr_blocks
────────────────────────────────────────────────────────────────────────────────


Result #6 CRITICAL Security group rule allows egress to multiple public internet addresses. 
────────────────────────────────────────────────────────────────────────────────
  security_groups.tf:56
────────────────────────────────────────────────────────────────────────────────
   31    resource "aws_security_group" "ssh_open" {
   ..  
   56  [     cidr_blocks = ["0.0.0.0/0"]
   ..  
   62    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-ec2-no-public-egress-sgr
      Impact Your port is egressing data to the internet
  Resolution Set a more restrictive cidr range

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/ec2/no-public-egress-sgr/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group
────────────────────────────────────────────────────────────────────────────────


Result #7 CRITICAL Security group rule allows ingress from public internet. 
────────────────────────────────────────────────────────────────────────────────
  security_groups.tf:75
────────────────────────────────────────────────────────────────────────────────
   65    resource "aws_security_group" "database_exposed" {
   ..  
   75  [     cidr_blocks = ["0.0.0.0/0"]  # Database exposed!
   ..  
   92    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-ec2-no-public-ingress-sgr
      Impact Your port exposed to the internet
  Resolution Set a more restrictive cidr range

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/ec2/no-public-ingress-sgr/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group_rule#cidr_blocks
────────────────────────────────────────────────────────────────────────────────


Result #8 CRITICAL Security group rule allows ingress from public internet. 
────────────────────────────────────────────────────────────────────────────────
  security_groups.tf:83
────────────────────────────────────────────────────────────────────────────────
   65    resource "aws_security_group" "database_exposed" {
   ..  
   83  [     cidr_blocks = ["0.0.0.0/0"]  # Database exposed!
   ..  
   92    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-ec2-no-public-ingress-sgr
      Impact Your port exposed to the internet
  Resolution Set a more restrictive cidr range

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/ec2/no-public-ingress-sgr/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group_rule#cidr_blocks
────────────────────────────────────────────────────────────────────────────────


Result #9 CRITICAL Security group rule allows egress to multiple public internet addresses. 
────────────────────────────────────────────────────────────────────────────────
  security_groups.tf:90
────────────────────────────────────────────────────────────────────────────────
   65    resource "aws_security_group" "database_exposed" {
   ..  
   90  [     cidr_blocks = ["0.0.0.0/0"]
   ..  
   92    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-ec2-no-public-egress-sgr
      Impact Your port is egressing data to the internet
  Resolution Set a more restrictive cidr range

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/ec2/no-public-egress-sgr/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group
────────────────────────────────────────────────────────────────────────────────


Result #10 HIGH Instance does not have storage encryption enabled. 
────────────────────────────────────────────────────────────────────────────────
  database.tf:15
────────────────────────────────────────────────────────────────────────────────
    5    resource "aws_db_instance" "unencrypted_db" {
    .  
   15  [   storage_encrypted = false  # No encryption! (false)
   ..  
   37    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-rds-encrypt-instance-storage-data
      Impact Data can be read from RDS instances if compromised
  Resolution Enable encryption for RDS instances

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/rds/encrypt-instance-storage-data/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance
────────────────────────────────────────────────────────────────────────────────


Result #11 HIGH Instance has Public Access enabled 
────────────────────────────────────────────────────────────────────────────────
  database.tf:17
────────────────────────────────────────────────────────────────────────────────
   17      publicly_accessible = true  # SECURITY ISSUE #10 - Public access!
────────────────────────────────────────────────────────────────────────────────
  Rego Package builtin.aws.rds.aws0180
     Rego Rule deny
────────────────────────────────────────────────────────────────────────────────


Result #12 HIGH Table encryption is not enabled. 
────────────────────────────────────────────────────────────────────────────────
  database.tf:72-92
────────────────────────────────────────────────────────────────────────────────
   72  ┌ resource "aws_dynamodb_table" "unencrypted_table" {
   73  │   name           = "my-table"
   74  │   billing_mode   = "PAY_PER_REQUEST"
   75  │   hash_key       = "id"
   76  │ 
   77  │   attribute {
   78  │     name = "id"
   79  │     type = "S"
   80  └   }
   ..  
────────────────────────────────────────────────────────────────────────────────
          ID aws-dynamodb-enable-at-rest-encryption
      Impact Data can be freely read if compromised
  Resolution Enable encryption at rest for DAX Cluster

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/dynamodb/enable-at-rest-encryption/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dax_cluster#server_side_encryption
────────────────────────────────────────────────────────────────────────────────


Result #13 HIGH IAM policy document uses sensitive action 'iam:CreatePolicy' on wildcarded resource '*' 
────────────────────────────────────────────────────────────────────────────────
  iam.tf:109
────────────────────────────────────────────────────────────────────────────────
  104    resource "aws_iam_policy" "privilege_escalation" {
  ...  
  109  [     Version = "2012-10-17"
  ...  
  125    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-iam-no-policy-wildcards
      Impact Overly permissive policies may grant access to sensitive resources
  Resolution Specify the exact permissions required, and to which resources they should apply instead of using wildcards.

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/iam/no-policy-wildcards/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/iam_policy_document
────────────────────────────────────────────────────────────────────────────────


Results #14-15 HIGH IAM policy document uses wildcarded action '*' (2 similar results)
────────────────────────────────────────────────────────────────────────────────
  iam.tf:10
────────────────────────────────────────────────────────────────────────────────
    5    resource "aws_iam_policy" "admin_policy" {
    .  
   10  [     Version = "2012-10-17"
   ..  
   19    }
────────────────────────────────────────────────────────────────────────────────
  Individual Causes
  - iam.tf:5-19 (aws_iam_policy.admin_policy) 2 instances
────────────────────────────────────────────────────────────────────────────────
          ID aws-iam-no-policy-wildcards
      Impact Overly permissive policies may grant access to sensitive resources
  Resolution Specify the exact permissions required, and to which resources they should apply instead of using wildcards.

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/iam/no-policy-wildcards/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/iam_policy_document
────────────────────────────────────────────────────────────────────────────────


Results #16-17 HIGH IAM policy document uses sensitive action 's3:*' on wildcarded resource '*' (2 similar results)
────────────────────────────────────────────────────────────────────────────────
  iam.tf:44
────────────────────────────────────────────────────────────────────────────────
   39    resource "aws_iam_role_policy" "s3_full_access" {
   ..  
   44  [     Version = "2012-10-17"
   ..  
   55    }
────────────────────────────────────────────────────────────────────────────────
  Individual Causes
  - iam.tf:39-55 (aws_iam_role_policy.s3_full_access) 2 instances
────────────────────────────────────────────────────────────────────────────────
          ID aws-iam-no-policy-wildcards
      Impact Overly permissive policies may grant access to sensitive resources
  Resolution Specify the exact permissions required, and to which resources they should apply instead of using wildcards.

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/iam/no-policy-wildcards/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/iam_policy_document
────────────────────────────────────────────────────────────────────────────────


Results #18-21 HIGH IAM policy document uses wildcarded action 'ec2:*' (4 similar results)
────────────────────────────────────────────────────────────────────────────────
  iam.tf:72
────────────────────────────────────────────────────────────────────────────────
   67    resource "aws_iam_user_policy" "service_policy" {
   ..  
   72  [     Version = "2012-10-17"
   ..  
   85    }
────────────────────────────────────────────────────────────────────────────────
  Individual Causes
  - iam.tf:67-85 (aws_iam_user_policy.service_policy) 4 instances
────────────────────────────────────────────────────────────────────────────────
          ID aws-iam-no-policy-wildcards
      Impact Overly permissive policies may grant access to sensitive resources
  Resolution Specify the exact permissions required, and to which resources they should apply instead of using wildcards.

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/iam/no-policy-wildcards/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/iam_policy_document
────────────────────────────────────────────────────────────────────────────────


Result #22 HIGH Bucket does not have encryption enabled 
────────────────────────────────────────────────────────────────────────────────
  main.tf:13-21
────────────────────────────────────────────────────────────────────────────────
   13    resource "aws_s3_bucket" "public_data" {
   14      bucket = "my-public-bucket-lab6"
   15      acl    = "public-read"  # Public access enabled!
   16    
   17      tags = {
   18        Name = "Public Data Bucket"
   19        # Missing required tags: Environment, Owner, CostCenter
   20      }
   21    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-enable-bucket-encryption
      Impact The bucket objects could be read if compromised
  Resolution Configure bucket encryption

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/enable-bucket-encryption/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#enable-default-server-side-encryption
────────────────────────────────────────────────────────────────────────────────


Result #23 HIGH Bucket does not encrypt data with a customer managed key. 
────────────────────────────────────────────────────────────────────────────────
  main.tf:13-21
────────────────────────────────────────────────────────────────────────────────
   13    resource "aws_s3_bucket" "public_data" {
   14      bucket = "my-public-bucket-lab6"
   15      acl    = "public-read"  # Public access enabled!
   16    
   17      tags = {
   18        Name = "Public Data Bucket"
   19        # Missing required tags: Environment, Owner, CostCenter
   20      }
   21    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-encryption-customer-key
      Impact Using AWS managed keys does not allow for fine grained control
  Resolution Enable encryption using customer managed keys

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/encryption-customer-key/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#enable-default-server-side-encryption
────────────────────────────────────────────────────────────────────────────────


Result #24 HIGH Bucket has a public ACL: 'public-read'. 
────────────────────────────────────────────────────────────────────────────────
  main.tf:15
────────────────────────────────────────────────────────────────────────────────
   13    resource "aws_s3_bucket" "public_data" {
   14      bucket = "my-public-bucket-lab6"
   15  [   acl    = "public-read"  # Public access enabled! ("public-read")
   16    
   17      tags = {
   18        Name = "Public Data Bucket"
   19        # Missing required tags: Environment, Owner, CostCenter
   20      }
   21    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-no-public-access-with-acl
      Impact Public access to the bucket can lead to data leakage
  Resolution Don't use canned ACLs or switch to private acl

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/no-public-access-with-acl/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket
────────────────────────────────────────────────────────────────────────────────


Result #25 HIGH No public access block so not blocking public acls 
────────────────────────────────────────────────────────────────────────────────
  main.tf:24-33
────────────────────────────────────────────────────────────────────────────────
   24    resource "aws_s3_bucket" "unencrypted_data" {
   25      bucket = "my-unencrypted-bucket-lab6"
   26      acl    = "private"
   27      
   28      # No server_side_encryption_configuration!
   29      
   30      versioning {
   31        enabled = false  # Versioning disabled
   32      }
   33    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-block-public-acls
      Impact PUT calls with public ACLs specified can make objects public
  Resolution Enable blocking any PUT calls with a public ACL specified

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/block-public-acls/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#block_public_acls
────────────────────────────────────────────────────────────────────────────────


Result #26 HIGH No public access block so not blocking public policies 
────────────────────────────────────────────────────────────────────────────────
  main.tf:24-33
────────────────────────────────────────────────────────────────────────────────
   24    resource "aws_s3_bucket" "unencrypted_data" {
   25      bucket = "my-unencrypted-bucket-lab6"
   26      acl    = "private"
   27      
   28      # No server_side_encryption_configuration!
   29      
   30      versioning {
   31        enabled = false  # Versioning disabled
   32      }
   33    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-block-public-policy
      Impact Users could put a policy that allows public access
  Resolution Prevent policies that allow public access being PUT

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/block-public-policy/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#block_public_policy
────────────────────────────────────────────────────────────────────────────────


Result #27 HIGH Bucket does not have encryption enabled 
────────────────────────────────────────────────────────────────────────────────
  main.tf:24-33
────────────────────────────────────────────────────────────────────────────────
   24    resource "aws_s3_bucket" "unencrypted_data" {
   25      bucket = "my-unencrypted-bucket-lab6"
   26      acl    = "private"
   27      
   28      # No server_side_encryption_configuration!
   29      
   30      versioning {
   31        enabled = false  # Versioning disabled
   32      }
   33    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-enable-bucket-encryption
      Impact The bucket objects could be read if compromised
  Resolution Configure bucket encryption

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/enable-bucket-encryption/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#enable-default-server-side-encryption
────────────────────────────────────────────────────────────────────────────────


Result #28 HIGH No public access block so not ignoring public acls 
────────────────────────────────────────────────────────────────────────────────
  main.tf:24-33
────────────────────────────────────────────────────────────────────────────────
   24    resource "aws_s3_bucket" "unencrypted_data" {
   25      bucket = "my-unencrypted-bucket-lab6"
   26      acl    = "private"
   27      
   28      # No server_side_encryption_configuration!
   29      
   30      versioning {
   31        enabled = false  # Versioning disabled
   32      }
   33    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-ignore-public-acls
      Impact PUT calls with public ACLs specified can make objects public
  Resolution Enable ignoring the application of public ACLs in PUT calls

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/ignore-public-acls/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#ignore_public_acls
────────────────────────────────────────────────────────────────────────────────


Result #29 HIGH No public access block so not restricting public buckets 
────────────────────────────────────────────────────────────────────────────────
  main.tf:24-33
────────────────────────────────────────────────────────────────────────────────
   24    resource "aws_s3_bucket" "unencrypted_data" {
   25      bucket = "my-unencrypted-bucket-lab6"
   26      acl    = "private"
   27      
   28      # No server_side_encryption_configuration!
   29      
   30      versioning {
   31        enabled = false  # Versioning disabled
   32      }
   33    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-no-public-buckets
      Impact Public buckets can be accessed by anyone
  Resolution Limit the access to public buckets to only the owner or AWS Services (eg; CloudFront)

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/no-public-buckets/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#restrict_public_buckets¡
────────────────────────────────────────────────────────────────────────────────


Result #30 HIGH Bucket does not encrypt data with a customer managed key. 
────────────────────────────────────────────────────────────────────────────────
  main.tf:24-33
────────────────────────────────────────────────────────────────────────────────
   24    resource "aws_s3_bucket" "unencrypted_data" {
   25      bucket = "my-unencrypted-bucket-lab6"
   26      acl    = "private"
   27      
   28      # No server_side_encryption_configuration!
   29      
   30      versioning {
   31        enabled = false  # Versioning disabled
   32      }
   33    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-encryption-customer-key
      Impact Using AWS managed keys does not allow for fine grained control
  Resolution Enable encryption using customer managed keys

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/encryption-customer-key/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#enable-default-server-side-encryption
────────────────────────────────────────────────────────────────────────────────


Result #31 HIGH Public access block does not block public ACLs 
────────────────────────────────────────────────────────────────────────────────
  main.tf:39
────────────────────────────────────────────────────────────────────────────────
   36    resource "aws_s3_bucket_public_access_block" "bad_config" {
   37      bucket = aws_s3_bucket.public_data.id
   38    
   39  [   block_public_acls       = false  # Should be true (false)
   40      block_public_policy     = false  # Should be true
   41      ignore_public_acls      = false  # Should be true
   42      restrict_public_buckets = false  # Should be true
   43    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-block-public-acls
      Impact PUT calls with public ACLs specified can make objects public
  Resolution Enable blocking any PUT calls with a public ACL specified

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/block-public-acls/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#block_public_acls
────────────────────────────────────────────────────────────────────────────────


Result #32 HIGH Public access block does not block public policies 
────────────────────────────────────────────────────────────────────────────────
  main.tf:40
────────────────────────────────────────────────────────────────────────────────
   36    resource "aws_s3_bucket_public_access_block" "bad_config" {
   37      bucket = aws_s3_bucket.public_data.id
   38    
   39      block_public_acls       = false  # Should be true
   40  [   block_public_policy     = false  # Should be true (false)
   41      ignore_public_acls      = false  # Should be true
   42      restrict_public_buckets = false  # Should be true
   43    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-block-public-policy
      Impact Users could put a policy that allows public access
  Resolution Prevent policies that allow public access being PUT

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/block-public-policy/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#block_public_policy
────────────────────────────────────────────────────────────────────────────────


Result #33 HIGH Public access block does not ignore public ACLs 
────────────────────────────────────────────────────────────────────────────────
  main.tf:41
────────────────────────────────────────────────────────────────────────────────
   36    resource "aws_s3_bucket_public_access_block" "bad_config" {
   37      bucket = aws_s3_bucket.public_data.id
   38    
   39      block_public_acls       = false  # Should be true
   40      block_public_policy     = false  # Should be true
   41  [   ignore_public_acls      = false  # Should be true (false)
   42      restrict_public_buckets = false  # Should be true
   43    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-ignore-public-acls
      Impact PUT calls with public ACLs specified can make objects public
  Resolution Enable ignoring the application of public ACLs in PUT calls

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/ignore-public-acls/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#ignore_public_acls
────────────────────────────────────────────────────────────────────────────────


Result #34 HIGH Public access block does not restrict public buckets 
────────────────────────────────────────────────────────────────────────────────
  main.tf:42
────────────────────────────────────────────────────────────────────────────────
   36    resource "aws_s3_bucket_public_access_block" "bad_config" {
   37      bucket = aws_s3_bucket.public_data.id
   38    
   39      block_public_acls       = false  # Should be true
   40      block_public_policy     = false  # Should be true
   41      ignore_public_acls      = false  # Should be true
   42  [   restrict_public_buckets = false  # Should be true (false)
   43    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-no-public-buckets
      Impact Public buckets can be accessed by anyone
  Resolution Limit the access to public buckets to only the owner or AWS Services (eg; CloudFront)

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/no-public-buckets/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#restrict_public_buckets¡
────────────────────────────────────────────────────────────────────────────────


Result #35 MEDIUM Instance has very low backup retention period. 
────────────────────────────────────────────────────────────────────────────────
  database.tf:22
────────────────────────────────────────────────────────────────────────────────
    5    resource "aws_db_instance" "unencrypted_db" {
    .  
   22  [   backup_retention_period = 0  # SECURITY ISSUE #11 - No backups! (0)
   ..  
   37    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-rds-specify-backup-retention
      Impact Potential loss of data and short opportunity for recovery
  Resolution Explicitly set the retention period to greater than the default

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/rds/specify-backup-retention/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#backup_retention_period
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#backup_retention_period
────────────────────────────────────────────────────────────────────────────────


Result #36 MEDIUM Instance does not have Deletion Protection enabled 
────────────────────────────────────────────────────────────────────────────────
  database.tf:28
────────────────────────────────────────────────────────────────────────────────
   28      deletion_protection = false  # SECURITY ISSUE #12
────────────────────────────────────────────────────────────────────────────────
  Rego Package builtin.aws.rds.aws0177
     Rego Rule deny
────────────────────────────────────────────────────────────────────────────────


Result #37 MEDIUM Instance has very low backup retention period. 
────────────────────────────────────────────────────────────────────────────────
  database.tf:40-69
────────────────────────────────────────────────────────────────────────────────
   40  ┌ resource "aws_db_instance" "weak_db" {
   41  │   identifier           = "mydb-weak"
   42  │   engine               = "mysql"
   43  │   engine_version       = "5.7.38"  # Old version with known vulnerabilities
   44  │   instance_class       = "db.t3.micro"
   45  │   allocated_storage    = 20
   46  │   
   47  │   username = "root"  # Using default admin username
   48  └   password = "password123"  # Weak password!
   ..  
────────────────────────────────────────────────────────────────────────────────
          ID aws-rds-specify-backup-retention
      Impact Potential loss of data and short opportunity for recovery
  Resolution Explicitly set the retention period to greater than the default

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/rds/specify-backup-retention/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster#backup_retention_period
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#backup_retention_period
────────────────────────────────────────────────────────────────────────────────


Result #38 MEDIUM Instance does not have IAM Authentication enabled 
────────────────────────────────────────────────────────────────────────────────
  database.tf:40-69
────────────────────────────────────────────────────────────────────────────────
   40  ┌ resource "aws_db_instance" "weak_db" {
   41  │   identifier           = "mydb-weak"
   42  │   engine               = "mysql"
   43  │   engine_version       = "5.7.38"  # Old version with known vulnerabilities
   44  │   instance_class       = "db.t3.micro"
   45  │   allocated_storage    = 20
   46  │   
   47  │   username = "root"  # Using default admin username
   48  └   password = "password123"  # Weak password!
   ..  
────────────────────────────────────────────────────────────────────────────────
  Rego Package builtin.aws.rds.aws0176
     Rego Rule deny
────────────────────────────────────────────────────────────────────────────────


Result #39 MEDIUM Instance does not have Deletion Protection enabled 
────────────────────────────────────────────────────────────────────────────────
  database.tf:40-69
────────────────────────────────────────────────────────────────────────────────
   40  ┌ resource "aws_db_instance" "weak_db" {
   41  │   identifier           = "mydb-weak"
   42  │   engine               = "mysql"
   43  │   engine_version       = "5.7.38"  # Old version with known vulnerabilities
   44  │   instance_class       = "db.t3.micro"
   45  │   allocated_storage    = 20
   46  │   
   47  │   username = "root"  # Using default admin username
   48  └   password = "password123"  # Weak password!
   ..  
────────────────────────────────────────────────────────────────────────────────
  Rego Package builtin.aws.rds.aws0177
     Rego Rule deny
────────────────────────────────────────────────────────────────────────────────


Result #40 MEDIUM Instance does not have IAM Authentication enabled 
────────────────────────────────────────────────────────────────────────────────
  database.tf:5-37
────────────────────────────────────────────────────────────────────────────────
    5  ┌ resource "aws_db_instance" "unencrypted_db" {
    6  │   identifier           = "mydb-unencrypted"
    7  │   engine               = "postgres"
    8  │   engine_version       = "13.7"
    9  │   instance_class       = "db.t3.micro"
   10  │   allocated_storage    = 20
   11  │   
   12  │   username = "admin"
   13  └   password = "SuperSecretPassword123!"  # SECURITY ISSUE #9 - Hardcoded password!
   ..  
────────────────────────────────────────────────────────────────────────────────
  Rego Package builtin.aws.rds.aws0176
     Rego Rule deny
────────────────────────────────────────────────────────────────────────────────


Result #41 MEDIUM Point-in-time recovery is not enabled. 
────────────────────────────────────────────────────────────────────────────────
  database.tf:86
────────────────────────────────────────────────────────────────────────────────
   72    resource "aws_dynamodb_table" "unencrypted_table" {
   ..  
   86  [     enabled = false  # SECURITY ISSUE #17 (false)
   ..  
   92    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-dynamodb-enable-recovery
      Impact Accidental or malicious writes and deletes can't be rolled back
  Resolution Enable point in time recovery

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/dynamodb/enable-recovery/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dynamodb_table#point_in_time_recovery
────────────────────────────────────────────────────────────────────────────────


Result #42 MEDIUM Bucket does not have logging enabled 
────────────────────────────────────────────────────────────────────────────────
  main.tf:13-21
────────────────────────────────────────────────────────────────────────────────
   13    resource "aws_s3_bucket" "public_data" {
   14      bucket = "my-public-bucket-lab6"
   15      acl    = "public-read"  # Public access enabled!
   16    
   17      tags = {
   18        Name = "Public Data Bucket"
   19        # Missing required tags: Environment, Owner, CostCenter
   20      }
   21    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-enable-bucket-logging
      Impact There is no way to determine the access to this bucket
  Resolution Add a logging block to the resource to enable access logging

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/enable-bucket-logging/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket
────────────────────────────────────────────────────────────────────────────────


Result #43 MEDIUM Bucket does not have versioning enabled 
────────────────────────────────────────────────────────────────────────────────
  main.tf:13-21
────────────────────────────────────────────────────────────────────────────────
   13    resource "aws_s3_bucket" "public_data" {
   14      bucket = "my-public-bucket-lab6"
   15      acl    = "public-read"  # Public access enabled!
   16    
   17      tags = {
   18        Name = "Public Data Bucket"
   19        # Missing required tags: Environment, Owner, CostCenter
   20      }
   21    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-enable-versioning
      Impact Deleted or modified data would not be recoverable
  Resolution Enable versioning to protect against accidental/malicious removal or modification

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/enable-versioning/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#versioning
────────────────────────────────────────────────────────────────────────────────


Result #44 MEDIUM Bucket does not have logging enabled 
────────────────────────────────────────────────────────────────────────────────
  main.tf:24-33
────────────────────────────────────────────────────────────────────────────────
   24    resource "aws_s3_bucket" "unencrypted_data" {
   25      bucket = "my-unencrypted-bucket-lab6"
   26      acl    = "private"
   27      
   28      # No server_side_encryption_configuration!
   29      
   30      versioning {
   31        enabled = false  # Versioning disabled
   32      }
   33    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-enable-bucket-logging
      Impact There is no way to determine the access to this bucket
  Resolution Add a logging block to the resource to enable access logging

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/enable-bucket-logging/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket
────────────────────────────────────────────────────────────────────────────────


Result #45 MEDIUM Bucket does not have versioning enabled 
────────────────────────────────────────────────────────────────────────────────
  main.tf:31
────────────────────────────────────────────────────────────────────────────────
   24    resource "aws_s3_bucket" "unencrypted_data" {
   25      bucket = "my-unencrypted-bucket-lab6"
   26      acl    = "private"
   27      
   28      # No server_side_encryption_configuration!
   29      
   30      versioning {
   31  [     enabled = false  # Versioning disabled (false)
   32      }
   33    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-enable-versioning
      Impact Deleted or modified data would not be recoverable
  Resolution Enable versioning to protect against accidental/malicious removal or modification

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/enable-versioning/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#versioning
────────────────────────────────────────────────────────────────────────────────


Result #46 LOW Instance does not have performance insights enabled. 
────────────────────────────────────────────────────────────────────────────────
  database.tf:5-37
────────────────────────────────────────────────────────────────────────────────
    5  ┌ resource "aws_db_instance" "unencrypted_db" {
    6  │   identifier           = "mydb-unencrypted"
    7  │   engine               = "postgres"
    8  │   engine_version       = "13.7"
    9  │   instance_class       = "db.t3.micro"
   10  │   allocated_storage    = 20
   11  │   
   12  │   username = "admin"
   13  └   password = "SuperSecretPassword123!"  # SECURITY ISSUE #9 - Hardcoded password!
   ..  
────────────────────────────────────────────────────────────────────────────────
          ID aws-rds-enable-performance-insights
      Impact Without adequate monitoring, performance related issues may go unreported and potentially lead to compromise.
  Resolution Enable performance insights

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/rds/enable-performance-insights/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster_instance#performance_insights_kms_key_id
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#performance_insights_kms_key_id
────────────────────────────────────────────────────────────────────────────────


Result #47 LOW Instance does not have performance insights enabled. 
────────────────────────────────────────────────────────────────────────────────
  database.tf:62
────────────────────────────────────────────────────────────────────────────────
   40    resource "aws_db_instance" "weak_db" {
   ..  
   62  [   performance_insights_enabled = false (false)
   ..  
   69    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-rds-enable-performance-insights
      Impact Without adequate monitoring, performance related issues may go unreported and potentially lead to compromise.
  Resolution Enable performance insights

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/rds/enable-performance-insights/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/rds_cluster_instance#performance_insights_kms_key_id
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/db_instance#performance_insights_kms_key_id
────────────────────────────────────────────────────────────────────────────────


Result #48 LOW Table encryption does not use a customer-managed KMS key. 
────────────────────────────────────────────────────────────────────────────────
  database.tf:72-92
────────────────────────────────────────────────────────────────────────────────
   72  ┌ resource "aws_dynamodb_table" "unencrypted_table" {
   73  │   name           = "my-table"
   74  │   billing_mode   = "PAY_PER_REQUEST"
   75  │   hash_key       = "id"
   76  │ 
   77  │   attribute {
   78  │     name = "id"
   79  │     type = "S"
   80  └   }
   ..  
────────────────────────────────────────────────────────────────────────────────
          ID aws-dynamodb-table-customer-key
      Impact Using AWS managed keys does not allow for fine grained control
  Resolution Enable server side encryption with a customer managed key

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/dynamodb/table-customer-key/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/dynamodb_table#server_side_encryption
────────────────────────────────────────────────────────────────────────────────


Result #49 LOW One or more policies are attached directly to a user 
────────────────────────────────────────────────────────────────────────────────
  iam.tf:58-65
────────────────────────────────────────────────────────────────────────────────
   58    resource "aws_iam_user" "service_account" {
   59      name = "service-account"
   60      path = "/system/"
   61    
   62      tags = {
   63        Name = "Service Account"
   64      }
   65    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-iam-no-user-attached-policies
      Impact Complex access control is difficult to manage and maintain.
  Resolution Grant policies at the group level instead.

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/iam/no-user-attached-policies/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_user
────────────────────────────────────────────────────────────────────────────────


Result #50 LOW Bucket does not have a corresponding public access block. 
────────────────────────────────────────────────────────────────────────────────
  main.tf:24-33
────────────────────────────────────────────────────────────────────────────────
   24    resource "aws_s3_bucket" "unencrypted_data" {
   25      bucket = "my-unencrypted-bucket-lab6"
   26      acl    = "private"
   27      
   28      # No server_side_encryption_configuration!
   29      
   30      versioning {
   31        enabled = false  # Versioning disabled
   32      }
   33    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-s3-specify-public-access-block
      Impact Public access policies may be applied to sensitive data buckets
  Resolution Define a aws_s3_bucket_public_access_block for the given bucket to control public access policies

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/s3/specify-public-access-block/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_public_access_block#bucket
────────────────────────────────────────────────────────────────────────────────


Result #51 LOW Security group rule does not have a description. 
────────────────────────────────────────────────────────────────────────────────
  security_groups.tf:18-23
────────────────────────────────────────────────────────────────────────────────
    5    resource "aws_security_group" "allow_all" {
    .  
   18  ┌   egress {
   19  │     from_port   = 0
   20  │     to_port     = 0
   21  │     protocol    = "-1"
   22  │     cidr_blocks = ["0.0.0.0/0"]
   23  └   }
   ..  
   28    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-ec2-add-description-to-security-group-rule
      Impact Descriptions provide context for the firewall rule reasons
  Resolution Add descriptions for all security groups rules

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/ec2/add-description-to-security-group-rule/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group_rule
────────────────────────────────────────────────────────────────────────────────


Result #52 LOW Security group rule does not have a description. 
────────────────────────────────────────────────────────────────────────────────
  security_groups.tf:52-57
────────────────────────────────────────────────────────────────────────────────
   31    resource "aws_security_group" "ssh_open" {
   ..  
   52  ┌   egress {
   53  │     from_port   = 0
   54  │     to_port     = 0
   55  │     protocol    = "-1"
   56  │     cidr_blocks = ["0.0.0.0/0"]
   57  └   }
   ..  
   62    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-ec2-add-description-to-security-group-rule
      Impact Descriptions provide context for the firewall rule reasons
  Resolution Add descriptions for all security groups rules

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/ec2/add-description-to-security-group-rule/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group_rule
────────────────────────────────────────────────────────────────────────────────


Result #53 LOW Security group rule does not have a description. 
────────────────────────────────────────────────────────────────────────────────
  security_groups.tf:86-91
────────────────────────────────────────────────────────────────────────────────
   65    resource "aws_security_group" "database_exposed" {
   ..  
   86  ┌   egress {
   87  │     from_port   = 0
   88  │     to_port     = 0
   89  │     protocol    = "-1"
   90  │     cidr_blocks = ["0.0.0.0/0"]
   91  └   }
   92    }
────────────────────────────────────────────────────────────────────────────────
          ID aws-ec2-add-description-to-security-group-rule
      Impact Descriptions provide context for the firewall rule reasons
  Resolution Add descriptions for all security groups rules

  More Information
  - https://aquasecurity.github.io/tfsec/v1.28.14/checks/aws/ec2/add-description-to-security-group-rule/
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group_rule
────────────────────────────────────────────────────────────────────────────────


  timings
  ──────────────────────────────────────────
  disk i/o             722.417µs
  parsing              1.371459ms
  adaptation           662.459µs
  checks               12.781334ms
  total                15.537669ms

  counts
  ──────────────────────────────────────────
  modules downloaded   0
  modules processed    1
  blocks processed     29
  files read           5

  results
  ──────────────────────────────────────────
  passed               18
  ignored              0
  critical             9
  high                 25
  medium               11
  low                  8

  18 passed, 53 potential problem(s) detected.

